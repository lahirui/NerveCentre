@model NerveCentre.App_DB.SetupDisplay

@{
    ViewBag.Title = "Create";
}

<h2>SETUP</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <script src="~/Scripts/jquery-3.3.1.min.js"></script>

    <link href="~/Assets/css/select2.min.css" rel="stylesheet" />
    <script src="~/Assets/js/select2.full.min.js" type="text/javascript"></script>

    <script src="~/Assets/js/sweetalert.min.js"></script>
    <script src="~/Assets/js/ac-alert.js"></script>

    <div class="form-horizontal">
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.TelevisionId, "Television", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("TelevisionId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TelevisionId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ResourceId, "Type", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("ResourceId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ResourceId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Order", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SortOrder, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.SortOrder, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Path", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ResourcePath, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.ResourcePath, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", @type = "number", @step = ".01", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    $('#TelevisionId').select2({ placeholder: "Select Mesh" });
    $('#ResourceId').select2({ placeholder: "Select Mesh" });

    var invalidChars = ["-", "+", "e"];
    var inputBox1 = document.getElementById("SortOrder");
    inputBox1.addEventListener("keydown", function (e) { if (invalidChars.includes(e.key)) { e.preventDefault(); } });
</script>
<style>
    input[type=number]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        display: none;
    }
</style>